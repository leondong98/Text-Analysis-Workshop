---
title: 代码帮助

---

# Coding Help

讲座人：Hanxu hanxu.dong.21@ucl.ac.uk

## 保存图表

### 基础 R 图表

在 R 中，有多种方法可以保存和导出图形。其中最常见的一种是使用 ``png()`` 函数，它会创建一个 PNG 文件并打开一个绘图设备。该函数的语法如下：

```r
png(filename, width, height, units = "px", res = 72)
```

- ``filename`` 是 PNG 文件应保存的文件名及路径。
- ``width`` 和 ``height`` 分别表示 PNG 文件的宽度和高度（以像素为单位）。
- ``units`` 指定宽度和高度的单位，默认值为 "px"（像素）。
- ``res`` 是 PNG 文件的分辨率，以每英寸点数（DPI）计，默认值为 72 DPI。

一旦绘图设备被打开，你就可以使用任何标准的 R 绘图函数（如 ``plot()``、``barplot()``、``hist()`` 等）来创建图形。一旦图形绘制完成，你可以通过调用 ``dev.off()`` 函数将其保存为 PNG 文件。

例如，假设我们有一个名为 ``data_for_plots`` 的数据框：

```r
head(data_for_plots)
```

```
  variable_a variable_b
1  0.1703222  0.6700134
2  0.1612494  1.5436437
3 -2.0870488  1.1083646
4  0.6901655  0.9038989
5 -1.0462657 -0.3617654
6 -0.1199232 -0.4250342
```

我们可以创建一个图表，并保存如下：
```r
png("path_to_folder/file_name.png", width = 500, height = 500)
plot(x = data_for_plots$variable_a,
     y = data_for_plots$variable_b,
     xlab = "X-axis variable name",
     ylab = "Y-axis variable name")
dev.off()
```

你也可以将图形保存为其他文件类型，例如 pdf、jpeg、bmp 等，通过使用对应的函数，如 ``pdf()``、``jpeg()``、``bmp()``。需要特别注意的是，在图形创建并保存之后，始终应调用 ``dev.off()`` 函数，以确保绘图设备被正确关闭。


### ggplots

另一种保存图形的方法是使用 ``ggsave()`` 函数（来自 ``ggplot2`` 包）。``ggsave()`` 会保存你最近创建的那一个 ``ggplot`` 图形:

```r
ggsave(filename, width = 7, height = 7, units = c("in", "cm", "mm"), dpi = 300)
```

- ``filename`` 是图形应保存的文件名及路径。
- ``width`` 和 ``height`` 分别表示图形的宽度和高度，单位由 ``units`` 参数指定。
- ``units`` 是宽度和高度的单位，默认值为 "in"（英寸）。
- ``dpi`` 是图形的分辨率，以每英寸点数（DPI）表示，默认值为 300 DPI。

例如：

```r
ggplot(data_for_plots,
       aes(x = variable_a,
           y = variable_b)) + 
  geom_point() + 
  xlab("X-axis variable name") + 
  ylab("Y-axis variable name")
ggsave("path_to_folder/file_name.png", width = 6, height = 6)
```

### ``group_by()`` 和 ``summarise()``

``group_by()`` 和 ``summarise()`` 函数是 ``dplyr`` 包的一部分，当你调用 ``library(tidyverse)`` 时会加载该包，它们通常用于执行数据聚合和汇总。

``group_by()`` 函数用于按一个或多个变量对数据框进行分组。例如，如果你有一个名为 ``data`` 的数据框，包含列 “``A``”、“``B``” 和 “``C``”，你可以使用以下代码按列 “``A``” 对数据进行分组：

```r
data %>%
  group_by(A)
```

你也可以通过传递多个列名作为参数，按多个列进行分组。例如：

```r
data %>% 
  group_by(A, B)
```

然后可以使用 ``summarise()`` 函数对分组后的数据进行汇总。该函数接受一个或多个参数，这些参数是你希望计算的汇总统计量。例如，你可以使用以下代码计算每个分组中列 “``C``” 的平均值：

```r
data %>% 
  group_by(A) %>% 
  summarise(mean_C = mean(C))
```

你也可以根据需要使用多个不同的汇总统计量，例如 ``sum``、``max``、``min`` 等。例如：

```r
data %>% group_by(A) %>% 
  summarise(mean_C = mean(C),
            median_B = median(B))
```

需要注意的是，``group_by()`` 函数必须在 ``summarise()`` 函数之前调用，且 ``summarise()`` 应是操作链中的最后一个函数。``summarise()`` 返回的是一个新的数据框，因此将结果赋值给一个新对象是一个良好的实践：

```r
my_summary_object <- data %>% 
  group_by(A) %>% 
  summarise(mean_C = mean(C),
            median_B = median(B))
```




