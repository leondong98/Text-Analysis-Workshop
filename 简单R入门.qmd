---
title: 简单R入门

---

# 简单 R 入门

讲座人：Hanxu hanxu.dong.21@ucl.ac.uk


如果你还没有接触过 R， 或者对上次使用 R 的操作已经有些生疏（这完全可以理解：编程就像外语学习，如果不用就会遗忘），你可以先完成这里提供的一些练习。这些练习旨在帮助你初识/回顾 R 编程的基本概念，以及如何高效使用 RStudio。

**首先，请下载 [R](https://cran.r-project.org/mirrors.html) 和 [RStudio](https://posit.co/download/rstudio-desktop/)**

**这个介绍将涵盖以下主题：**
- 在控制台中使用 R
- 在脚本文件中使用 R
- 对象与赋值
- 向量（vectors）
- 函数的使用
- 帮助文档的查询
- 数据框（data frames）
- 子集提取（subsetting）
- 线性回归（linear regression）
- t 检验（t-test）

## RStudio

让我们来熟悉一下 R 和 Rstudio。第一次启动 RStudio 时，你会看到三个面板：

<img src="https://raw.githubusercontent.com/leondong98/Text-Analysis-Workshop/main/images/r_1.png" width="800"/>

接下来让我们来一个个熟悉这些面板

## 1. Console （控制台）

左侧是控制台（console），这是与 R 交互的最简单方式。你可以在控制台中输入代码（点击光标显示为 ``> |`` 的位置），按下 ENTER 键后，R 就会执行该段代码。

根据你输入的内容，你可能会在控制台中看到相应的输出结果；如果你输入有误，也可能会收到警告信息或错误提示。

首先，让我们通过将 R 当作一个简单的计算器来熟悉控制台的使用：

```r
2 + 7
```

```
[1] 9
```

```r
5 * 6
```

```
[1] 30
```

```r
7 / 2
```

```
[1] 3.5
```


</details> 

> 你可以使用键盘上的光标键或方向键在控制台中编辑你的代码：
> - 使用 ↑（向上） 和 ↓（向下） 键可以重新运行之前输入的代码，而无需重新输入
> - 使用 ↑（向上） 和 ↓（向下） 键可以重新运行之前输入的代码，而无需重新输入


## 2. 脚本（Scripts)

控制台非常适合处理简单任务，但如果你正在进行一个项目，你会通常希望将工作保存在某种文档或文件中。R 中的脚本（script）就是包含 R 代码的纯文本文件。你可以像编辑任何文字处理或笔记应用中的文件一样编辑脚本。

**我们建议你在本课程中始终使用脚本文件进行操作。**

请使用菜单栏或工具栏按钮（如下图所示）来创建一个新的脚本文件:

<img src="https://raw.githubusercontent.com/leondong98/Text-Analysis-Workshop/main/images/r_2.png" width="800"/>

创建脚本后，请立即为其赋予一个有意义的文件名并保存。

请注意 RStudio 中的脚本窗口，特别是其中标有 Run 和 Source 的两个按钮：

<img src="https://raw.githubusercontent.com/leondong98/Text-Analysis-Workshop/main/images/r_3.png" width="300"/>

💡从脚本中运行代码有几种不同的方式：
| 执行方式        | 操作说明                                                                 |
|----------------|--------------------------------------------------------------------------|
| 单行执行        | 将光标放在你要运行的行上，按下 `CTRL + ENTER`，或点击 **Run** 按钮         |
| 多行执行        | 选中你要运行的多行代码，按下 `CTRL + ENTER`，或点击 **Run** 按钮           |
| 整个脚本执行     | 点击 **Source** 按钮                                                     |


## 3. 对象与赋值（Objects & assignment）

R 语言中操作的基本结构称为“对象（objects）”。创建对象是将信息存储在 R 中的一种方式，我们可以为任何对象赋予任意名称。一旦创建了对象，我们就可以在后续的多种任务中使用它。

让我们从创建一个对象开始，该对象用于存储一个简单加法的结果。我们使用赋值运算符 ``<-`` 来创建或更新对象。例如，如果我们希望保存 10 + 4 的结果，可以这样写：

```r
my_result <- 10 + 4
```

上面这一行代码创建了一个名为 ``my_result`` 的新对象，并将 ``10 + 4`` 的结果保存在其中。要查看 ``my_result`` 中的内容，只需在控制台中输入它的名字：

```r
my_result
```

```
[1] 14
```


请注意，所有对象名称在 R 中都是区分大小写的，因此如果你在控制台中输入 My_Result，你将会看到如下报错信息：
```
Error in eval(expr, envir, enclos): object 'My_Result' not found
```
对象最有用的地方在于：一旦创建，就可以在后续的计算中使用它们。例如：

```r
my_result*2
```
```
[1] 28
```

你甚至可以对一个对象进行计算，并将结果赋值给一个新的对象：

```r
my_new_result <- my_result*2
my_new_result
```
```
[1] 28
```

现在，我们已经创建了两个对象，查看 RStudio 中的 **Environment** 面板，你会看到其中列出了 ``my_result`` 和 ``my_new_result`` 两个对象。

<img src="https://raw.githubusercontent.com/leondong98/Text-Analysis-Workshop/main/images/r_4.png" width="500"/>

要从环境中删除所有对象，可以使用如上图所示的扫帚按钮（broom button）。

我们将对象命名为 my_result，但其实你可以使用任何名称，只要遵守以下几个简单的规则即可：
- 对象名称可以包含大小写字母（A–Z，a–z）、数字（0–9）、下划线（_）或句点（.）
- 但对象名称必须以字母开头
- 建议选择具有描述性且易于输入的名称，以便提高代码可读性与可维护性

| 推荐的对象名       | 不推荐的对象名                                                                 |
|----------------|--------------------------------------------------------------------------|
| result      | a      |
| my_result        | x1          |
| my.result     | this.name.is.just.too.long|
| my_new_result     | sing,dance,rap,basketball                                                   |


## 4. 向量（Vectors）

``my_result`` 和 ``my_new_result`` 都是只包含单个数字的对象。但在实际操作中，我们常常需要处理相互关联的一组数字。为此，我们需要使用的基本构建模块就是**向量（vectors）**。

向量就是一组信息（通常是数字，但也可以是字符字符串或逻辑值），按特定顺序组合在一起。

在 R 中创建向量的一种方式是使用 ``c()`` 函数，它可以将多个数值“连接”（concatenate）在一起。例如，我们可以将以下数字连接成一个向量：

```r
my_first_vector <- c(0, 1, 1, 2, 3, 5, 8, 13, 21, 34)
my_first_vector
```
```
 [1]  0  1  1  2  3  5  8 13 21 34
```

向量中数值的存储顺序是重要的，我们可以使用方括号 ``[ ]`` 来访问向量中的单个元素。例如，如果我们希望访问刚刚创建的向量中的第 3 个元素，可以这样操作：
```r
my_first_vector[3]
```
```
 [1]  1
```

这是一个向量子集提取（subsetting）的基本示例，它可以让我们访问向量中我们想使用的部分。我们还可以使用一个向量来提取另一个向量的子集，例如``my_first_vector[c(1,3,5)]`` 将返回我们向量中的第 1、3 和 5 个元素。

```r
my_first_vector[c(1,3,5)]
```
```
 [1] 0 1 3
```

## 5. 函数（Vectors）

函数是一组用于执行特定任务的指令。函数通常需要一些输入，并生成某种输出。例如，我们可以不用加号运算符 +，而使用 sum 函数来对两个或多个数字进行求和。让我们来试试将我们上面创建的向量中的所有元素相加：

```r
sum(my_first_vector)
```
```
[1] 88
```

这里我们将向量作为 ``sum()`` 函数的输入，输出结果是 88。你可以手动检查这个结果是否正确，或者直接相信 R 能够正确地计算这些数字的总和。

函数的调用必须使用圆括号 ``()``。传递给函数的输入称为参数（arguments），它们被放在括号内。函数的输出通常会显示在屏幕上，但我们也可以选择将其输出结果保存下来。例如：
```r
vec_sum <- sum(my_first_vector)
vec_sum
```
```
[1] 88
```

在这里，``vec_sum`` 也是一个对象！所以我们对一些数据（``my_first_vector``）执行了一个计算（``sum()``），并将结果（``vec_sum``）存储了下来。

尝试对我们创建的向量应用其他函数。例如，你可以尝试使用 ``mean()``、``median()``、``max()`` 和 ``min()``。这些结果是否与你的预期一致？

⚠️请注意，R 中的函数名称也是区分大小写的！
这意味着，``mean(my_first_vector)`` 可以正确计算向量的平均值，而 ``Mean(my_first_vector)`` 则会报错。

```r
mean(my_first_vector)
median(my_first_vector)
max(my_first_vector)
min(my_first_vector)
```
```
[1] 8.8
[1] 4
[1] 34
[1] 0
```

## 6. 帮助（Help）

在控制台右下角，你会看到一个面板，包含名为 ``Plots``、``Packages``、``Help`` 和 ``Viewer`` 的多个标签页。现在我们暂时用不到大部分内容，但让我们先了解一下 ``Help`` 面板。

在 R 中，任何函数都有对应的帮助文件。例如，如果我们想了解如何使用 ``sum()`` 函数，可以输入：

```r
help(sum)
```

问号 ``?`` 也可以作为快捷方式来访问在线帮助:
```r
?sum
```
<img src="https://raw.githubusercontent.com/leondong98/Text-Analysis-Workshop/main/images/r_5.png" width="900"/>

你可以使用上图所示的工具栏按钮，将帮助内容展开并在新窗口中显示。

R 中函数的帮助页面遵循一致的结构，通常包括以下几个部分：

| 项目        | 说明                                                         |
|-------------|--------------------------------------------------------------|
| Description | 函数的简要描述                                               |
| Usage       | 包括所有参数（输入）的完整语法或用法                         |
| Arguments   | 每个参数的解释                                               |
| Details     | 关于该函数及其参数的任何相关详细信息                         |
| Value       | 函数的输出值                                                 |
| Examples    | 使用该函数的示例                                             |


## 7. data.frames (数据框)

``data.frame`` 是一种以表格形式存储数据的对象，类似于电子表格的结构，其中每一列代表一个变量，每一行代表一个观测单位。

虽然你可以手动创建一个 ``data.frame``，但在大多数情况下，你会从文件中加载一个数据集，而在 R 中它将被表示为一个 ``data.frame``。不过现在我们将使用一个 R 中预装的数据集。

让我们来看一个名为 ``longley`` 的宏观经济数据集。为此，请在你的 R 脚本中运行以下代码：

```r
data(longley)
```

``longley`` 数据集是一个包含 7 个变量 和 16 个观测值 的 ``data.frame``。

```r
help(longley)
```
帮助页面对这 7 个变量中的每一个都进行了描述。现在让我们来看一下 longley 数据集中的内容:

```r
longley
```

<details>
<summary>Click to show output</summary>

<pre style="overflow-x: auto; max-height: 400px; white-space: pre; font-family: monospace; background-color: #f8f8f8; padding: 1em; border-radius: 6px;">

     GNP.deflator     GNP Unemployed Armed.Forces Population Year Employed
1947         83.0 234.289      235.6        159.0    107.608 1947   60.323
1948         88.5 259.426      232.5        145.6    108.632 1948   61.122
1949         88.2 258.054      368.2        161.6    109.773 1949   60.171
1950         89.5 284.599      335.1        165.0    110.929 1950   61.187
1951         96.2 328.975      209.9        309.9    112.075 1951   63.221
1952         98.1 346.999      193.2        359.4    113.270 1952   63.639
1953         99.0 365.385      187.0        354.7    115.094 1953   64.989
1954        100.0 363.112      357.8        335.0    116.219 1954   63.761
1955        101.2 397.469      290.4        304.8    117.388 1955   66.019
1956        104.6 419.180      282.2        285.7    118.734 1956   67.857
1957        108.4 442.769      293.6        279.8    120.445 1957   68.169
1958        110.8 444.546      468.1        263.7    121.950 1958   66.513
1959        112.6 482.704      381.3        255.2    123.366 1959   68.655
1960        114.2 502.601      393.1        251.4    125.368 1960   69.564
1961        115.7 518.173      480.6        257.2    127.852 1961   69.331
1962        116.9 554.894      400.7        282.7    130.081 1962   70.551

</pre> 
    
</details>


我们也可以使用 ``View`` 函数查看 ``longley`` 数据集，该函数会以类似电子表格的形式显示数据框:

```r
View(longley)
```

## 8. 子集提取（Subsetting）

在分析 ``data.frame`` 时，我们通常希望对数据进行子集提取。也就是说，我们常常只想从数据中选择某些特定的行或特定的列。

### ``$`` 符号

访问 ``data.frame`` 中单个列的最简单方法是使用符号 ``$``。例如，我们来看如何只访问 ``Year`` 这一列：

```r
longley$Year
```
```
 [1] 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961
[16] 1962
```


没错，这是一个向量（vector）！也就是说，它是一组按顺序连接在一起的信息。因此，我们可以像前面示例中那样，访问该向量中的特定元素。例如：

```r
longley$Year[7]
```
```
[1] 1953
```

``longley$Year`` 向量的第七个元素是 1953。

现在，请你试着使用 ``$`` 来访问 ``GNP`` 变量,请查看其第 1、2 和 10 个元素的值：

<details>
<summary>Reveal answer</summary>
    
```r
longley$Year[7]
```
    
```
 [1] 234.289 259.426 258.054 284.599 328.975 346.999 365.385 363.112 397.469
[10] 419.180 442.769 444.546 482.704 502.601 518.173 554.894  
```
    
```r
longley$GNP[c(1,2,10)]
```
    
```
[1] 234.289 259.426 419.180
```

</pre> 
    
</details>


### ``[,]`` 符号

我们之前提到，可以使用方括号 ``[ ]`` 对向量进行子集提取。
在处理 ``data.frame`` 时，我们通常希望访问某些特定的观测值（行）、变量（列），或两者的组合，而不是一次性查看整个数据集。我们也可以使用方括号 ``[,]`` 对数据框进行子集提取。

在方括号中，我们用逗号分隔行坐标和列坐标。行坐标写在前，列坐标写在后。例如：
- ``longley[10, 3]`` 返回数据框第 10 行第 3 列 的内容。
- 如果省略列坐标，表示取该行的所有列：``longley[10, ]`` 返回第 10 行 的所有数据。
- 如果省略行坐标，表示取该列的所有行：``longley[, 3]`` 返回第 3 列 的全部内容。

```r
longley[10, 3] # 第 10 行第 3 列中的元素
```
    
```
[1] 282.2
```

```r
longley[10, ] # 整个第 10 行的元素
```
    
```
     GNP.deflator    GNP Unemployed Armed.Forces Population Year Employed
1956        104.6 419.18      282.2        285.7    118.734 1956   67.857
```

```r
longley[, 3] # 整个第 3 列的元素
```
    
```
 [1] 235.6 232.5 368.2 335.1 209.9 193.2 187.0 357.8 290.4 282.2 293.6 468.1
[13] 381.3 393.1 480.6 400.7
```


我们可以用方括号中的冒号来查看数据集的前五行，例如：``longley[1:5,]``。我们也可以使用方括号中的 ``c()`` 函数来显示数据集的第二列和第五列，例如：``longley[, c(2,5)]``。

💻请试试查看 ``longley`` 数据集的所有列并显示第 10 到 15 行。接着显示数据集的所有列但只显示第 4 和第 7 行。

<details>
<summary>Reveal answer</summary>
    
```r
longley[10:15, ] # 数据集的所有列并显示第 10 到 15 行
```
    
```
     GNP.deflator     GNP Unemployed Armed.Forces Population Year Employed
1956        104.6 419.180      282.2        285.7    118.734 1956   67.857
1957        108.4 442.769      293.6        279.8    120.445 1957   68.169
1958        110.8 444.546      468.1        263.7    121.950 1958   66.513
1959        112.6 482.704      381.3        255.2    123.366 1959   68.655
1960        114.2 502.601      393.1        251.4    125.368 1960   69.564
1961        115.7 518.173      480.6        257.2    127.852 1961   69.331
```
    
```r
longley[c(4, 7), ] # 数据集的所有列但只显示第 4 和第 7 行
```
    
```
     GNP.deflator     GNP Unemployed Armed.Forces Population Year Employed
1950         89.5 284.599      335.1        165.0    110.929 1950   61.187
1953         99.0 365.385      187.0        354.7    115.094 1953   64.989
```

</pre> 
    
</details>


### 逻辑运算符（Logical Operators）

我们也可以通过逻辑值和逻辑运算符进行子集提取。R 中有两个用于表示逻辑值的特殊表示：``TRUE`` 和 ``FALSE``。R 还有许多逻辑运算符，例如：大于``>``、小于``<`` 和 等于``==``。

当我们将逻辑运算符应用于一个对象时，返回的值应该是一个逻辑值。例如：

```r
2 > 1
```
    
```
[1] TRUE
```

```r
2 < 1
```
    
```
[1] FALSE
```

在这里，当我们询问 R 是否 2 > 1，R 返回逻辑值 ``TRUE``；当我们询问 2 < 1 时，R 返回逻辑值 ``FALSE``。

在子集提取中，逻辑操作非常有用，因为它们可以用来指定我们希望返回向量或数据框中的哪些元素。例如，假设我们只想使用 ``longley`` 数据集中 1955 年及以后的数据。为了将数据子集提取为这些观测值，我们可以这样做：

```r
longley[longley$Year > 1954,]
```
    
```
     GNP.deflator     GNP Unemployed Armed.Forces Population Year Employed
1955        101.2 397.469      290.4        304.8    117.388 1955   66.019
1956        104.6 419.180      282.2        285.7    118.734 1956   67.857
1957        108.4 442.769      293.6        279.8    120.445 1957   68.169
1958        110.8 444.546      468.1        263.7    121.950 1958   66.513
1959        112.6 482.704      381.3        255.2    123.366 1959   68.655
1960        114.2 502.601      393.1        251.4    125.368 1960   69.564
1961        115.7 518.173      480.6        257.2    127.852 1961   69.331
1962        116.9 554.894      400.7        282.7    130.081 1962   70.551
```

这里发生了什么？让我们来慢慢分析一下这段代码：
- 我们使用 ``$`` 符号从数据框 ``longley`` 中提取变量 ``Year``
- 我们要求 R 告诉我们该变量中哪些观测值大于 1954
- 我们使用 ``[ , ]``对数据框 ``longley`` 进行子集提取，只保留满足该条件的观测值

如果我们只对方括号中的代码进行求值，就可以看到更详细的情况：
```r
longley$Year > 1954
```
    
```
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE
[13]  TRUE  TRUE  TRUE  TRUE
```

你可以看到，R 对于 ``Year`` 大于 1954 的观测值返回 ``TRUE``，否则返回 ``FALSE``。正是这个逻辑向量被用在方括号中，用于对子集提取 ``data.frame``。

💻现在轮到你来试试！请使用逻辑运算符，将 ``longley`` 数据集子集化，仅保留那些 ``Population``小于 115 的观测值。

<details>
<summary>Reveal answer</summary>
    
```r
longley[longley$Population < 115, ] 
```
    
```
     GNP.deflator     GNP Unemployed Armed.Forces Population Year Employed
1947         83.0 234.289      235.6        159.0    107.608 1947   60.323
1948         88.5 259.426      232.5        145.6    108.632 1948   61.122
1949         88.2 258.054      368.2        161.6    109.773 1949   60.171
1950         89.5 284.599      335.1        165.0    110.929 1950   61.187
1951         96.2 328.975      209.9        309.9    112.075 1951   63.221
1952         98.1 346.999      193.2        359.4    113.270 1952   63.639
```

</pre> 
    
</details>


### 整合所学内容

现在我们已经学习了函数、子集提取和对象赋值的相关内容，现在我们要将这三者结合起来使用。

🖊️让我们试着比较一下 1955 年之前和之后美国的 GNP 平均水平。在查看下方答案前，先试试使用你上面学到的工具来完成这个任务。

<details>
<summary>Reveal answer</summary>
    
```r
mean_gnp_pre_55 <- mean(longley[longley$Year < 1955,]$GNP)
mean_gnp_post_55 <- mean(longley[longley$Year >= 1955,]$GNP)

mean_gnp_pre_55
mean_gnp_post_55
```
    
```
[1] 305.1049
[1] 470.292
```

这段代码中发生了什么？对于上面结果的第一行，我们可以按如下方式描述每个步骤：
- ``longley$Year < 1955`` 选取了 ``longley`` 中 ``Year`` 小于 1955 的那些行
- ``$GNP`` 选取了 ``GNP`` 变量
- ``mean()`` 计算了该变量的平均值
- ``mean_gnp_pre_55 <-`` 将该计算结果赋值给对象 ``mean_gnp_pre_55``

我们在第二行中只是对不同的数据子集重复了相同的步骤，其中 ``longley$Year >= 1955`` 选取了 ``Year`` 大于或等于 1955 的那些行。
    
    
</pre> 
    
</details>


## 9. 线性回归（Linear regression）

R 中的线性回归是通过 ``lm()`` 函数实现的。使用``lm()`` 函数需要知道两件事：a) 我们要建模的关系；b) 包含观测数据的数据集。

我们需要为 ``lm()`` 函数提供的两个参数如下所述：

| 参数 (Argument) | 描述 (Description) |
|----------------|---------------------|
| ``formula``      | ``formula`` 用于描述因变量与自变量之间的关系，例如 ``dependent.variable ~ independent.variable`` |
| ``data``         | 数据集中包含相关变量的名称 |

要了解 ``lm()`` 函数的更多信息，也可以在 R 中输入 ``help(lm)``。

💻延续上面的示例，请运行一个线性回归，其中 ``GNP`` 是因变量，自变量是一个二元变量：当 Year ≥ 1955 时取值为 1，否则为 0（你需要自行对该变量进行编码）。
再次提醒：在查看下面的答案前，请尽量自己尝试完成这个任务。

<details>
<summary>Reveal answer</summary>
    
```r
# 编码二元自变量
longley$post_1955 <- longley$Year >= 1955

# 运行回归
gnp_ols <- lm(GNP ~ post_1955, longley)

# 概述回归结果
summary(gnp_ols)
```
    
```
Call:
lm(formula = GNP ~ post_1955, data = longley)

Residuals:
    Min      1Q  Median      3Q     Max 
-72.823 -46.022  -4.047  43.391  84.602 

Coefficients:
              Estimate Std. Error t value Pr(>|t|)    
(Intercept)     305.10      18.67  16.341 1.63e-10 ***
post_1955TRUE   165.19      26.40   6.256 2.11e-05 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 52.81 on 14 degrees of freedom
Multiple R-squared:  0.7365,    Adjusted R-squared:  0.7177 
F-statistic: 39.14 on 1 and 14 DF,  p-value: 2.105e-05
```

回归系数是 165.19 这和上面 “手动”计算的均值差相同。
    
</pre> 
    
</details>


## 10. T-tests

t 检验（t-test） 是一种常用的统计方法，用于比较两个样本或一个样本与一个已知值之间的均值差异是否显著。它主要用于样本量较小且总体标准差未知的情况下。t 检验根据样本的均值差异、样本大小和方差来计算一个 t 统计量，然后根据这个统计量与 t 分布进行比较，以判断差异是否显著（即是否可能是由于随机误差造成的）。是否显著由 p 值 决定（通常以 p < 0.05 为显著性水平的标准）。
    
让我们在 R 中用 t 检验 来计算均值差异，使用 ``t.test()`` 函数。该函数的语法如下：


```r
t.test(formula, mu, alt, conf)
```

| 参数 (Arguments) | 描述 (Description) |
|------------------|--------------------|
| ``formula``        | 用于描述因变量和自变量之间的关系，例如：``dependent.variable ~ independent.variable`。我们将在 t 检验中使用该公式以比较均值差异。 |
| ``mu``             | 设置原假设。原假设为总体均值之间的真实差异为 0，因此我们设置 ``mu = 0``。 |
| ``alt``            | 设置备择假设。假设均值差异为 0 的情况下，备择可以是差异更大或更小。若需对两者同时进行检验，设置为 ``alt = "two.sided"``。 |
| ``conf``           | 设置拒绝原假设时所需的置信水平。常见的置信区间为：95%、99%、99.9%。 |


让我们使用 ``t.test()`` 函数比较 1955 年之前与1955 年及之后两个时期的 ``GNP`` 平均水平:

```r
t.test(longley$GNP ~ longley$post_1955, mu = 10000, alt = "two.sided") 
```
    
```
    Welch Two Sample t-test

data:  longley$GNP by longley$post_1955
t = -384.98, df = 13.992, p-value < 2.2e-16
alternative hypothesis: true difference in means between group FALSE and group TRUE is not equal to 10000
95 percent confidence interval:
 -221.8222 -108.5521
sample estimates:
mean in group FALSE  mean in group TRUE 
           305.1049            470.2920
```






